{"version":3,"names":[],"mappings":"","sources":["signaler.js"],"sourcesContent":["module.exports = emitter => {\n  if (!emitter) emitter = require('es-emitter')(); // please, please, please get rid of this\n\n  return transport => {\n    var {emit, on, off} = emitter();\n\n    var signaler = {\n      peers: {},\n      peerCount: 0,\n\n      managePeer: managePeer,\n      dropPeer: dropPeer,\n\n      managesPeer: managesPeer\n    };\n\n    transport.on({\n      'offer':      data => receiveOffer(data.peerID, data.offer),\n      'answer':     data => receiveAnswer(data.peerID, data.answer),\n      'candidates': data => receiveIceCandidates(data.peerID, data.candidates)\n    });\n\n    var {peers} = signaler;\n    var {emit: send} = transport;\n\n    function managePeer(peer) {\n      var peerID = peer.id,\n          candidates = [];\n\n      peers[peerID] = peer;\n      signaler.peerCount++;\n\n      peer.on({\n        'offer ready': offer => {\n          console.log('offer ready');\n          send('offer', {peerID, offer});\n          emit('send offer', peer, offer);\n        },\n\n        ice_candidate: event => {\n          var candidate = event.candidate;\n\n          if (candidate) {\n            candidates.push(candidate);\n            sendIceCandidates();\n            emit('ice_candidate', peer, candidate);\n          }\n        },\n      });\n\n      // Is this the best way to do this?\n      var sendIceCandidates = _.throttle(() => {\n        send('candidates', {peerID, candidates});\n        candidates.splice(0);\n      }, 0);\n\n      return peer;\n    }\n\n    function dropPeer(peer) {\n      var storedPeer = peers[peer.id];\n      if (storedPeer) {\n        storedPeer.off();\n        delete peers[peer.id];\n        signaler.peerCount--;\n      }\n\n      return peer;\n    }\n\n    function receiveOffer(peerID, offer) {\n      var peer = getPeer(peerID);\n\n      emit('peer receive offer', peer, offer);\n      peer\n        .receiveOffer(offer)\n        .then(\n          answer => {\n            send('answer', {peerID, answer});\n            emit('send answer', peer, answer);\n          },\n          (...error) => emit('error offer', peer, answer, ...error));\n    }\n\n    function receiveAnswer(peerID, answer) {\n      var peer = getPeer(peerID);\n\n      emit('peer receive answer', peer, answer);\n      peer\n        .receiveAnswer(answer)\n        .then(\n          () =>       emit('accepted answer', peer, answer),\n          (...error) => emit('error answer', peer, answer, ...error));\n    }\n\n    function receiveIceCandidates(peerID, candidates) {\n      var peer = getPeer(peerID);\n\n      emit('peer receive candidates', peer, candidates);\n      peer\n        .addIceCandidates(candidates)\n        .then(\n          () =>       emit('accepted candidates', peer, candidates),\n          (...error) => emit('error candidates', peer, candidates, ...error));\n    }\n\n    function getPeer(id) {\n      var peer = peers[id];\n\n      if (peer) return peer;\n\n      throw 'Tried to get non-existent peer!';\n    }\n\n    function managesPeer(id) {\n      const peer = peers[id];\n      return peer !== null && peer !== undefined;\n    }\n\n    return signaler;\n  };\n};"],"file":"signaler.js","sourceRoot":"/source/"}